from core.lipkin_quasi_spin import hamiltonian, eigs
from grove.pyvqe.vqe import VQE
import numpy as np
from pyquil import get_qc
from core import ansatz
from core import matrix_to_op
from core import vqe_eig_new
from core import init_params
from scipy.optimize import minimize
from skopt import gp_minimize

import matplotlib.pyplot as plt
from core import vqeOverride

samples = 10000
j = 7 / 2
V = 1
i = 0
h = hamiltonian(j, V)[i]
print(h.toarray())
eigvals = eigs(j, V)[i]
print(eigvals)
qc = get_qc('3q-qvm')

bayes = False

if bayes:
    acq_func = "gp_hedge"
    n_calls = 30
    n_random_starts = 5
    random_state = 123
    parameters = [(-3.0, 3.0) for i in range(h.shape[0] - 1)]
    # All options to Bayes opt
    opt_options = {'acq_func': acq_func,
                   'n_calls': n_calls,
                   'n_random_starts': n_random_starts,
                   'random_state': random_state}

    vqe = vqeOverride.VQE_override(minimizer=gp_minimize,
                                   minimizer_kwargs=opt_options)

    # Run to calculate the noise level
    initial_param = [param[0] for param in parameters]
    _, noise = vqe.expectation(ansatz.mp_test(initial_param), H,
                               samples=samples, qc=qc)

    opt_options['noise'] = noise

    # Need to initiate the vqe again so we can give it the variance as noise
    vqe = vqeOverride.VQE_override(minimizer=gp_minimize,
                                   minimizer_kwargs=opt_options)
else:

    xatol = 1e-2
    fatol = 1e-2
    maxiter = 50
    display_after_run = True
    # All options to Nelder-Mead
    disp_options = {'disp': display_after_run, 'xatol': xatol, 'fatol': fatol,
                    'maxiter': maxiter}
    parameters = init_params.alternate(h.shape[0])

    vqe = vqeOverride.VQE_override(minimizer=minimize,
                                   minimizer_kwargs={'method': 'Nelder-Mead',
                                                     'options': disp_options})

parameters = np.concatenate((np.array([1]), parameters), axis=0)

ans = vqe_eig_new.all(h, qc, ansatz.mp_test(h.shape[0]), vqe, parameters,
                      samples=None,
                      topauli_method=matrix_to_op.multi_particle,
                      num_eigvals=None, bayes=False, disp_run_info=True)
for i in range(h.shape[0]):
    print('Found eigenvalue: ', ans[i]['fun'])
print('True eigenvalues: ', eigvals)
